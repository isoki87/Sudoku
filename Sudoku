package sudoku;
import java.util.LinkedList;

public class Sudoku {
	//why does my debug not tell me all the variable that i want
	int[] r1 = new int[9];
	int[] r2 = new int[9];
	int[] r3 = new int[9];
	int[] r4 = new int[9];
	int[] r5 = new int[9];
	int[] r6 = new int[9];
	int[] r7 = new int[9];
	int[] r8 = new int[9];
	int[] r9 = new int[9];		
	private int columns = 0, rows = 0;
	
	private void fillPuzzle() {
		generateNumbers(r1);	
		generateNumbers(r2);	
		generateNumbers(r3);
		generateNumbers(r4);
		generateNumbers(r5);
		generateNumbers(r6);
		generateNumbers(r7);
		generateNumbers(r8);
		generateNumbers(r9);		
	}
	
	private void generateNumbers(int[] toFill) {
		columns = 0;		
			if (rows == 0) {	
				LinkedList<Integer> toAdd = new LinkedList<Integer>();	
				toAdd = populateNumbersList(toAdd);	
				for (int x = 0; x < 9; x++) {
					int addNumber = (int)(Math.random() * toAdd.size());
					toFill[x] = toAdd.get(addNumber);
					toAdd.remove(addNumber);
				}
			} else if (rows == 8) {
				for (int x = 0; x < 9; x++) {
					LinkedList<Integer> toAdd = new LinkedList<Integer>();	
					toAdd = populateNumbersList(toAdd);				
					toAdd = compareColumn(toAdd);
					toFill[x] = toAdd.get(0);
					columns++;
				}				
			} else {
				for (int x = 0; x < 9; x++) {	
					LinkedList<Integer> toAdd = new LinkedList<Integer>();	
					toAdd = populateNumbersList(toAdd);						
					toAdd = compareColumn(toAdd);
					toAdd = compareRow(toFill, toAdd);								
					toAdd = compareSector(determineSector(), toAdd);
					int addNumber = (int)(Math.random() * toAdd.size());
					toFill[x] = toAdd.get(addNumber);							
					columns++;
				}		
			}
		rows++;
	}
	
	private LinkedList<Integer> compareColumn(LinkedList<Integer> toAdd) {
		toAdd = checkColumnSquare(r1, toAdd);
		toAdd = checkColumnSquare(r2, toAdd);
		toAdd = checkColumnSquare(r3, toAdd);
		toAdd = checkColumnSquare(r4, toAdd);
		toAdd = checkColumnSquare(r5, toAdd);
		toAdd = checkColumnSquare(r6, toAdd);
		toAdd = checkColumnSquare(r7, toAdd);
		toAdd = checkColumnSquare(r8, toAdd);	
		toAdd = checkColumnSquare(r9, toAdd);			
		return toAdd;		
	}
	
	private LinkedList<Integer> checkColumnSquare(int[] arr, LinkedList<Integer> toAdd) {
		int testNumber = (int)(Math.random() * toAdd.size());
		if (arr[columns] == 0) {
		} else if (toAdd.get(testNumber) == arr[columns]){ 
			toAdd.remove(testNumber);
		} else {
			toAdd.remove((Integer)(arr[columns]));
		} 
		return toAdd;
	}
	
	private LinkedList<Integer> compareRow(int[]arr, LinkedList<Integer> toAdd) {
		for (int x = 0; x < arr.length; x++) {
			int testNumber = (int)(Math.random() * toAdd.size());
			if (arr[x] == 0) {
				break;
			} else if (toAdd.get(testNumber) == arr[x]) {
				toAdd.remove(testNumber);
			} else {
				toAdd.remove((Integer)(arr[x]));
			}			
		}
		return toAdd;	
	}
	
	private int determineSector() {
		int sector;	
		if (rows < 3 && columns < 3) {
			sector = 1;
		} else if (rows < 3 && columns >= 3 && columns < 6) {
			sector = 2;
		} else if (rows < 3 && columns >= 6) {
			sector = 3;
		} else if (rows >= 3 && rows < 6 && columns < 3) {
			sector = 4;
		} else if (rows >= 3 && rows < 6 && columns >= 3 && columns < 6) {
			sector = 5;
		} else if (rows >= 3 && rows < 6 && columns >= 6) {
			sector = 6;
		} else if (rows >= 6 && columns < 3){
			sector = 7;
		} else if (rows >= 6 && columns >= 3 && columns < 6) {
			sector = 8;
		} else {
			sector = 9;
		}				
		return sector;
	}
	
	private LinkedList<Integer> compareSector(int sector, LinkedList<Integer> toAdd) {
		if (sector == 1) {
			toAdd = compareSectorFrag(r1, 1, toAdd);
			toAdd = compareSectorFrag(r2, 1, toAdd);
			toAdd = compareSectorFrag(r3, 1, toAdd);
		} else if (sector == 2) {		
			toAdd = compareSectorFrag(r4, 2, toAdd);
			toAdd = compareSectorFrag(r5, 2, toAdd);
			toAdd = compareSectorFrag(r6, 2, toAdd);
		} else if (sector == 3) {
			toAdd = compareSectorFrag(r7, 3, toAdd);
			toAdd = compareSectorFrag(r8, 3, toAdd);
			toAdd = compareSectorFrag(r9, 3, toAdd);	
		} else if (sector == 4) {	
			toAdd = compareSectorFrag(r1, 4, toAdd);
			toAdd = compareSectorFrag(r2, 4, toAdd);
			toAdd = compareSectorFrag(r3, 4, toAdd);				
		} else if (sector == 5) {
			toAdd = compareSectorFrag(r4, 5, toAdd);
			toAdd = compareSectorFrag(r5, 5, toAdd);
			toAdd = compareSectorFrag(r6, 5, toAdd);						
		} else if (sector == 6) {
			toAdd = compareSectorFrag(r7, 6, toAdd);
			toAdd = compareSectorFrag(r8, 6, toAdd);
			toAdd = compareSectorFrag(r9, 6, toAdd);				
		} else if (sector == 7) {
			toAdd = compareSectorFrag(r1, 7, toAdd);
			toAdd = compareSectorFrag(r2, 7, toAdd);
			toAdd = compareSectorFrag(r3, 7, toAdd);				
		} else if (sector == 8) {
			toAdd = compareSectorFrag(r4, 8, toAdd);
			toAdd = compareSectorFrag(r5, 8, toAdd);
			toAdd = compareSectorFrag(r6, 8, toAdd);
		} else {	
			toAdd = compareSectorFrag(r7, 9, toAdd);
			toAdd = compareSectorFrag(r8, 9, toAdd);
			toAdd = compareSectorFrag(r9, 9, toAdd);				
		}
		return toAdd;
	}	
	
	private LinkedList<Integer> compareSectorFrag(int[] arr, int sector, LinkedList<Integer> toAdd) {
		int counter = 0;
		int x;
		if (sector == 1 || sector == 2 || sector == 3) {
			x = 0;				
		} else if (sector == 4 || sector == 5 || sector == 6) {
			x = 3;
		} else {
			x = 6;
		}
		while (counter < 3) {
			int testNumber = (int)(Math.random() * toAdd.size());			
			if (arr[x] == 0) {
				break;
			} else if (toAdd.get(testNumber) == arr[x]) {
				toAdd.remove(testNumber);
			} else {
				toAdd.remove((Integer)(arr[x]));
			}
			x++;
			counter++;
		}	
		return toAdd;		
	}
		
	private LinkedList<Integer> populateNumbersList(LinkedList<Integer> toPopulate) {
		for (int x = 1; x <= 9; x++) {
			toPopulate.add(x);
		}		
		return toPopulate;
	}

}
